#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

// Function prototypes
void initializeBoard(int board[]);
void displayBoard(const int board[]);
bool isBoardFull(const int board[]);
bool checkWin(const int board[], char player);
void playerMove(int board[]);
void computerMove(int board[]);

int main() {
    int board[9];
    initializeBoard(board);
    displayBoard(board);

    // Game loop
    while (!isBoardFull(board) && !checkWin(board, 'X') && !checkWin(board, 'O')) {
        playerMove(board);
        displayBoard(board);
        if (isBoardFull(board) || checkWin(board, 'X')) break;
        computerMove(board);
        displayBoard(board);
    }

    // Determine the winner or if it's a tie
    if (checkWin(board, 'X'))
        cout << "Congratulations! You win!" << endl;
    else if (checkWin(board, 'O'))
        cout << "Computer wins! Better luck next time." << endl;
    else
        cout << "It's a tie!" << endl;

    return 0;
}

// Function to initialize the board
void initializeBoard(int board[]) {
    for (int i = 0; i < 9; ++i)
        board[i] = i + 1;
}

// Function to display the board
void displayBoard(const int board[]) {
    cout << "Tic Tac Toe" << endl;
    cout << "-----------" << endl;
    for (int i = 0; i < 9; ++i) {
        cout << "|" << board[i];
        if ((i + 1) % 3 == 0)
            cout << "|" << endl;
    }
    cout << "-----------" << endl;
}

// Function to check if the board is full
bool isBoardFull(const int board[]) {
    for (int i = 0; i < 9; ++i) {
        if (board[i] != 'X' && board[i] != 'O')
            return false;
    }
    return true;
}

// Function to check if a player has won
bool checkWin(const int board[], char player) {
    // Check rows, columns, and diagonals
    return ((board[0] == player && board[1] == player && board[2] == player) || // row 1
            (board[3] == player && board[4] == player && board[5] == player) || // row 2
            (board[6] == player && board[7] == player && board[8] == player) || // row 3
            (board[0] == player && board[3] == player && board[6] == player) || // column 1
            (board[1] == player && board[4] == player && board[7] == player) || // column 2
            (board[2] == player && board[5] == player && board[8] == player) || // column 3
            (board[0] == player && board[4] == player && board[8] == player) || // diagonal
            (board[2] == player && board[4] == player && board[6] == player));   // diagonal
}

// Function for player's move
void playerMove(int board[]) {
    int move;
    cout << "Enter your move (1-9): ";
    cin >> move;

    while (board[move - 1] == 'X' || board[move - 1] == 'O' || move < 1 || move > 9) {
        cout << "Invalid move. Enter again: ";
        cin >> move;
    }

    board[move - 1] = 'X';
}

// Function for computer's move
void computerMove(int board[]) {
    int move;
    // Generate random move
    do {
        move = rand() % 9;
    } while (board[move] == 'X' || board[move] == 'O');

    board[move] = 'O';
}
